!function(){"use strict";const e={name:"Jacques Cousteau",job:"Explorer"},t={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__submit-button",inactiveButtonClass:"form__submit-button_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__input-error_visible",fixedPlaceholderClass:"form__placeholder_is-fixed",closeButtonSelector:".popup__close-button"},i={cardSelector:".card",cardTemplateSelector:".template_card",inputCardNameSelector:".form__input_value_card-name",inputCardLinkSelector:".form__input_value_card-link",cardTitleSelector:".card__title",cardPictureSelector:".card__picture",cardLikeButtonSelector:".card__like-button",cardLikeButtonActiveClass:"card__like-button_active",cardDeleteButtonSelector:".card__delete-button",inputCardNameID:"card-name-input",inputCardLinkID:"card-link-input",cardsContainerSelector:"#gallery"},o="popup_opened";class r{constructor(e){let{data:t,cardTemplateSelector:i,cardSettings:o,handleCardClick:r}=e;this._name=t.name,this._link=t.link,this._cardTemplateSelector=i,this._cardSettings=o,this._handleCardClick=r}_getTemplate(){return document.querySelector(this._cardTemplateSelector).content.querySelector(this._cardSettings.cardSelector).cloneNode(!0)}generateCard(){return this._element=this._getTemplate(),this._addTemplateElements(),this._setCardContent(),this._setEventListeners(),this._element}_addTemplateElements(){this._cardTitle=this._element.querySelector(this._cardSettings.cardTitleSelector),this._cardPicture=this._element.querySelector(this._cardSettings.cardPictureSelector),this._cardLikeButton=this._element.querySelector(this._cardSettings.cardLikeButtonSelector),this._cardDeleteButton=this._element.querySelector(this._cardSettings.cardDeleteButtonSelector)}_setCardContent(){this._cardTitle.textContent=this._name,this._cardPicture.src=this._link,this._cardPicture.alt="picture of ".concat(this._name)}_setEventListeners(){this._cardLikeButton.addEventListener("click",(()=>{this._handleCardLikeClick()})),this._cardDeleteButton.addEventListener("click",(()=>{this._handleCardDelete()})),this._cardPicture.addEventListener("click",(()=>{const e={name:this._name,link:this._link};this._handleCardClick(e)}))}_handleCardLikeClick(){this._cardLikeButton.classList.toggle(this._cardSettings.cardLikeButtonActiveClass)}_handleCardDelete(){this._element.remove(),this._element=null}}class s{constructor(e,t){this._formSettings=e,this._formElement=t}enableValidation(){this._addFormElements(),this._enableSubmitValidation(),this._setCustomPlaceholders()}_addFormElements(){this._submitButtonElement=this._formElement.querySelector(this._formSettings.submitButtonSelector),this._inputsList=Array.from(this._formElement.querySelectorAll(this._formSettings.inputSelector))}_enableSubmitValidation(){this._enableInputsValidation(),this._disableSubmit(),this._formElement.addEventListener("submit",(e=>{e.preventDefault()}))}_setCustomPlaceholders(){this._inputsList.forEach((e=>{e.addEventListener("input",(()=>this._togglePlaceholder(e)))}))}_togglePlaceholder(e){!e.value.length>=1?this._unfreezePlaceholder(e):this._freezePlaceholder(e)}_freezePlaceholder(e){this._formElement.querySelector(".".concat(e.id,"-placeholder")).classList.add(this._formSettings.fixedPlaceholderClass)}_unfreezePlaceholder(e){this._formElement.querySelector(".".concat(e.id,"-placeholder")).classList.remove(this._formSettings.fixedPlaceholderClass)}_toggleSubmitButtonState(){this._hasInvalidInput(this._inputsList)?this._disableSubmit():this._ableSubmit()}_disableSubmit(){this._submitButtonElement.classList.add(this._formSettings.inactiveButtonClass),this._submitButtonElement.disabled=!0}_ableSubmit(){this._submitButtonElement.classList.remove(this._formSettings.inactiveButtonClass),this._submitButtonElement.disabled=!1}_enableInputsValidation(){this._inputsList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleSubmitButtonState()}))}))}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_showInputError(e,t){const i=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.add(this._formSettings.inputErrorClass),i.textContent=t,i.classList.add(this._formSettings.errorClass)}_hideInputError(e){const t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._formSettings.inputErrorClass),t.classList.remove(this._formSettings.errorClass),t.textContent=""}_hasInvalidInput(){return this._inputsList.some((e=>!e.validity.valid))}resetForm(){this._formElement.reset(),this._inputsList.forEach((e=>{this._unfreezePlaceholder(e),this._hideInputError(e)})),this._disableSubmit()}loadFormData(){this._inputsList.forEach((e=>{this._freezePlaceholder(e),this._hideInputError(e)})),this._disableSubmit()}}class n{constructor(e){this._popupElement=document.querySelector(e),this._closePopupButtonElement=this._popupElement.querySelector(".popup__close-button"),this.closePopup=this.closePopup.bind(this),this._handleEscClose=this._handleEscClose.bind(this),this._handleFocusOutPopup=this._handleFocusOutPopup.bind(this)}_handleEscClose(e){"Escape"===e.key&&this.closePopup()}_handleFocusOutPopup(e){e.target==this._popupElement&&this.closePopup()}openPopup(){this._popupElement.classList.add(o),this._setTempEventListeners()}closePopup(){this._popupElement.classList.remove(o),this._removeTempEventListeners()}_setTempEventListeners(){this._closePopupButtonElement.addEventListener("click",this.closePopup),this._popupElement.addEventListener("mousedown",this._handleFocusOutPopup),document.addEventListener("keydown",this._handleEscClose)}_removeTempEventListeners(){this._closePopupButtonElement.removeEventListener("click",this.closePopup),this._popupElement.removeEventListener("mousedown",this._handleFocusOutPopup),document.removeEventListener("keydown",this._handleEscClose)}}class l extends n{constructor(e){let{popupSelector:t,handleFormSubmitData:i}=e;super(t),this._formElement=this._popupElement.querySelector(".popup__form"),this._handleFormSubmitData=i,this.closePopup=this.closePopup.bind(this),this._handleFormSubmit=this._handleFormSubmit.bind(this)}_getInputValues(){return this._inputList=this._formElement.querySelectorAll(".form__input"),this._formValues={},this._inputList.forEach((e=>this._formValues[e.name]=e.value)),this._formValues}closePopup(){super.closePopup(),this._formElement.reset()}_handleFormSubmit(e){e.preventDefault(),this._handleFormSubmitData(this._getInputValues()),this.closePopup()}_setTempEventListeners(){super._setTempEventListeners(),this._formElement.addEventListener("submit",this._handleFormSubmit)}_removeTempEventListeners(){super._removeTempEventListeners(),this._formElement.removeEventListener("submit",this._handleFormSubmit)}}class a{constructor(e){let{containerSelector:t,initialSection:i,handleTextItems:o}=e;this._container=document.querySelector(t),this._textItems=i.textItems,this._renderAllItems=i.renderAllItems,this.handleTextItems=o}initializeContainerText(){this._renderAllItems(this._textItems)}resetItems(e){this._textItems=e,this.initializeContainerText()}setItemTextContent(e){let{sourceElementSelector:t,newTextValue:i}=e;this._container.querySelector(t).textContent=i}setItemValue(e){let{sourceElementSelector:t,newValue:i}=e;this._container.querySelector(t).value=i}}const c=document.querySelector("#content"),u=c.querySelector("#profile"),d=u.querySelector(".profile__info"),p=d.querySelector(".profile__edit-button"),m=u.querySelector(".profile__add-button"),_=(d.querySelector(".profile__name"),d.querySelector(".profile__details"),document.querySelector("#edit-profile-form-popup")),h=(_.querySelector(".popup__container"),_.querySelector(".popup__close-button"),_.querySelector("#edit-profile-form")),S=(h.querySelector(".form__title"),h.querySelector(".form__submit-button"),h.querySelector(".form__input_value_profile-name"),h.querySelector(".form__input_value_profile-job"),c.querySelector(".gallery"),document.querySelector("#card-template").querySelector(".card"),document.querySelector("#add-card-form-popup")),f=(S.querySelector(".popup__container"),S.querySelector(".popup__close-button"),S.querySelector("#add-card-form")),E=(f.querySelector(".form__title"),f.querySelector(".form__submit-button"),document.querySelector("#card-popup")),b=(E.querySelector(".popup__container_value_card-popup"),E.querySelector(".popup__close-button_placed_card-popup"),E.querySelector(".popup__close-up-picture"),E.querySelector(".popup__picture-details"),new class extends n{constructor(e){super(e),this._imageLinkElement=this._popupElement.querySelector(".popup__close-up-picture"),this._imageCaptionElement=this._popupElement.querySelector(".popup__picture-details")}openPopup(e){this._setImageData(e),this._setPopupContent(),super.openPopup()}_setImageData(e){this._imageLink=e.link,this._imageCaption=e.caption}_setPopupContent(){this._imageLinkElement.src=this._imageLink,this._imageLinkElement.alt="close up picture of ".concat(this._imageCaption),this._imageCaptionElement.textContent=this._imageCaption}closePopup(){super.closePopup(),delete this._imageLink,delete this._imageCaption}}("#card-popup")),C=new class{constructor(e){let{initialSection:t,containerSelector:i}=e;this._items=t.items,this._renderItem=t.renderItem,this._container=document.querySelector(i)}renderItemsList(){this._items.forEach(this._renderItem)}renderNewItem(e){this._items.push(e),this._renderItem(e)}addItemToBeginning(e){this._container.prepend(e)}}({initialSection:{items:[{name:"Yosemite Valley",link:"https://code.s3.yandex.net/web-code/yosemite.jpg"},{name:"Lake Louise",link:"https://code.s3.yandex.net/web-code/lake-louise.jpg"},{name:"Bald Mountains",link:"https://code.s3.yandex.net/web-code/bald-mountains.jpg"},{name:"Latemar",link:"https://code.s3.yandex.net/web-code/latemar.jpg"},{name:"Vanoise National Park",link:"https://code.s3.yandex.net/web-code/vanoise.jpg"},{name:"Lago di Braies",link:"https://code.s3.yandex.net/web-code/lago.jpg"}],renderItem:e=>{const t=function(e,t){const o=new r({data:e,cardTemplateSelector:i.cardTemplateSelector,cardSettings:i,handleCardClick:e=>function(e,t){t.openPopup({link:e.link,caption:e.name})}(e,t)});return o.generateCard()}(e,b);C.addItemToBeginning(t)}},containerSelector:"#gallery"}),y=new class{constructor(e){this._profileNameElement=document.querySelector(e.name),this._profileJobElement=document.querySelector(e.job)}getUserInfo(){const e={};return e.name=this._profileNameElement.textContent,e.job=this._profileJobElement.textContent,e}setUserInfo(e){this._profileNameElement.textContent=e.name,this._profileJobElement.textContent=e.job}}({name:"#name-profile-load-value",job:"#job-profile-load-value"}),L=new a({containerSelector:"#profile",initialSection:{textItems:e,renderAllItems:e=>{for(const[t,i]of Object.entries(e))L.setItemTextContent({sourceElementSelector:"#".concat(t,"-profile-load-value"),newTextValue:i})}},handleTextItems:e=>{y.setUserInfo(e)}}),g=new a({containerSelector:"#edit-profile-form",initialSection:{textItems:e,renderAllItems:e=>{for(const[t,i]of Object.entries(e))g.setItemValue({sourceElementSelector:"#profile-".concat(t,"-input"),newValue:i})}},handleTextItems:()=>{const e=y.getUserInfo();g.resetItems(e)}}),v=[];v.editProfile=new s(t,h),v.addCard=new s(t,f);const I=new l({popupSelector:"#add-card-form-popup",handleFormSubmitData:e=>{v.addCard.resetForm(),S.classList.contains(o)&&C.renderNewItem(e)}}),k=new l({popupSelector:"#edit-profile-form-popup",handleFormSubmitData:e=>{v.editProfile.resetForm(),_.classList.contains(o)&&L.handleTextItems(e)}});v.editProfile.enableValidation(),v.addCard.enableValidation(),C.renderItemsList(),L.initializeContainerText(),g.initializeContainerText(),m.addEventListener("click",(function(){v.addCard.resetForm(),I.openPopup()})),p.addEventListener("click",(function(){g.handleTextItems(),v.editProfile.loadFormData(),k.openPopup()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,